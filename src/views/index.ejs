<!DOCTYPE html>
<html lang="pt-BR">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Audio visualizer</title>
	<style>
		body {
			margin: 0;
			background: #000;
		}
	</style>
</head>
<body>
	<script>
		class Music {
			constructor() {
				this.init();
			}

			async init() {
				this.addElementsOnPage();
			}

			addElementsOnPage() {
				this.canvas = document.createElement('canvas')
				this.audio = null;
				this.canvas.style.position = 'fixed';
				this.canvas.width = innerWidth;
				this.canvas.height = innerHeight;
				document.body.appendChild(this.canvas);
			}

			async drawAudioVisualizer(musicaid = 'c8bd59cbd6a52e426e3742cf079412c8') {
				this.parar()
				const response = await fetch('http://localhost:3333/stream/' + musicaid)
				const blob = await response.blob()
				this.audio = new Audio(URL.createObjectURL(blob))

				// this.audio.src = URL.createObjectURL('http://localhost:3333/stream/c8bd59cbd6a52e426e3742cf079412c8');
				this.audio.load();
				this.audio.play();

				this.audioCtx = new AudioContext();
				this.audioCtxSource = this.audioCtx.createMediaElementSource(this.audio);
				this.audioAnalyser = this.audioCtx.createAnalyser();

				this.ctx = this.canvas.getContext('2d');
				this.audioCtxSource.connect(this.audioAnalyser);
				this.audioAnalyser.connect(this.audioCtx.destination);
				this.audioAnalyser.fftSize = 256;

				this.bufferLength = this.audioAnalyser.frequencyBinCount;
				this.dataArray = new Uint8Array(this.bufferLength);
				this.WIDTH = this.canvas.width;
				this.HEIGHT = this.canvas.height;
				this.barWidth = (this.WIDTH / this.bufferLength) * 1.5;
				this.barHeight = 0;

				this.renderFrame();

				this.xRect = this.yRect = 0;
			}

			renderFrame = _ => {
				this.audioAnalyser.getByteFrequencyData(this.dataArray);
				this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);

				const radius = 150, bars = 100, strokeColor = '#3399ff';

				this.ctx.beginPath();
				this.ctx.arc(innerWidth / 2, innerHeight / 2, radius, 0, 2 * Math.PI);
				this.ctx.strokeStyle = strokeColor;
				this.ctx.stroke();

				for (let i = 4; i < bars; i++) {
					const radians = (Math.PI * 2) / bars;
					const barHeight = this.dataArray[i] * .5;

					const x = innerWidth / 2 + Math.cos(radians * i) * radius;
					const y = innerHeight / 2 + Math.sin(radians * i) * radius;

					const x_end = innerWidth / 2 + Math.cos(radians * i) * (radius + barHeight);
					const y_end = innerHeight / 2 + Math.sin(radians * i) * (radius + barHeight);

					this.ctx.strokeStyle = strokeColor;
					this.ctx.lineWidth = 3;
					this.ctx.beginPath();
					this.ctx.moveTo(x, y);
					this.ctx.lineTo(x_end, y_end);
					this.ctx.stroke();
				}

				requestAnimationFrame(this.renderFrame);
			}

			parar = _ => {
				if (this.audio) {
					this.audio.pause()
					this.audio = null
				}
			}
		}

		const musica = new Music()
		musica.drawAudioVisualizer('4f56a45d4d0257dddeb02e1a92bf77ea')
	</script>
</body>
</html>